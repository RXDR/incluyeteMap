import React from 'react';
import { useNavigate } from 'react-router-dom';

interface RightSidebarTop10BarriosProps {
  data: Array<{
    barrio: string;
    total_encuestas: number;
    matches_count: number;
    intensity_score?: number;
  }>;
}

const RightSidebarTop10Barrios: React.FC<RightSidebarTop10BarriosProps> = ({ data }) => {
  const navigate = useNavigate();
  
  const sortedBarrios = React.useMemo(() => {
    if (!data || !Array.isArray(data)) return [];
    return [...data].sort((a, b) => b.matches_count - a.matches_count).slice(0, 10);
  }, [data]);

  // Calcular totales de TODOS los barrios, no solo del top 10
  const totals = React.useMemo(() => {
    if (!data || !Array.isArray(data)) return null;
    return data.reduce((acc, item) => ({
      totalBarrios: acc.totalBarrios + 1,
      totalEncuestas: acc.totalEncuestas + item.total_encuestas,
      totalCoincidencias: acc.totalCoincidencias + item.matches_count
    }), { totalBarrios: 0, totalEncuestas: 0, totalCoincidencias: 0 });
  }, [data]);

  return (
    <div style={{
      position: 'fixed',
      top: 72,
      right: 0,
      height: 'calc(100vh - 72px)',
      width: 340,
      background: '#1f2937',
      borderLeft: '1px solid #23272f',
      boxShadow: '-2px 0 8px rgba(0,0,0,0.18)',
      zIndex: 40,
      padding: '32px 24px',
      overflowY: 'auto',
      color: '#fff',
      display: 'flex',
      flexDirection: 'column',
      gap: 16,
      fontFamily: 'Inter, sans-serif',
    }}>
      {totals && (
        <div style={{
          background: '#23272f',
          border: '1.5px solid #2d3748',
          borderRadius: 8,
          padding: '16px',
          marginBottom: 20
        }}>
          <div style={{ fontWeight: 700, fontSize: 20, marginBottom: 12, color: '#f6e05e' }}>
            Totales Generales
          </div>
          <div style={{ display: 'flex', flexDirection: 'column', gap: 8 }}>
            <div>Total Barrios: <span style={{ color: '#f6e05e' }}>{totals.totalBarrios}</span></div>
            <div>Total Encuestas: <span style={{ color: '#f6e05e' }}>{totals.totalEncuestas}</span></div>
            <div>Total Coincidencias: <span style={{ color: '#f6e05e' }}>{totals.totalCoincidencias}</span></div>
            <div>Porcentaje General: <span style={{ color: '#f6e05e' }}>{((totals.totalCoincidencias / totals.totalEncuestas) * 100).toFixed(2)}%</span></div>
          </div>
        </div>
      )}

      <div style={{ fontWeight: 700, fontSize: 22, marginBottom: 12, color: '#fff', display: 'flex', alignItems: 'center', gap: 8 }}>
        <span role="img" aria-label="Top">üèÜ</span>
        <span>Top 10 Barrios</span>
      </div>

      <ol style={{ margin: 0, paddingLeft: 0, listStyle: 'none', display: 'flex', flexDirection: 'column', gap: 12 }}>
        {sortedBarrios.map((item, idx) => (
          <li
            key={item.barrio}
            style={{
              background: '#23272f',
              border: '1.5px solid #2d3748',
              borderRadius: 8,
              padding: '12px 16px',
              color: '#fff',
              fontSize: 16,
              display: 'flex',
              alignItems: 'center',
              justifyContent: 'space-between',
              boxShadow: '0 2px 6px rgba(0,0,0,0.08)',
              transition: 'border 0.2s',
            }}
          >
            <span style={{ fontWeight: 500 }}>
              {idx + 1}. {item.barrio}
            </span>
            <span style={{ display: 'flex', alignItems: 'center', gap: 6, marginLeft: 12 }}>
              <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="10" cy="10" r="10" fill="#f6e05e" />
                <path d="M10 10.5c1.38 0 2.5-1.12 2.5-2.5S11.38 5.5 10 5.5 7.5 6.62 7.5 8 8.62 10.5 10 10.5zm0 1.25c-1.67 0-5 0.84-5 2.5V16h10v-1.75c0-1.66-3.33-2.5-5-2.5z" fill="#23272f" />
              </svg>
              <div style={{ display: 'flex', alignItems: 'baseline', gap: 4 }}>
                <span style={{ color: '#f6e05e', fontWeight: 700, fontSize: 17 }}>{item.matches_count}</span>
                <span style={{ color: '#4b5563', fontSize: 12 }}>/{item.total_encuestas}</span>
              </div>
            </span>
          </li>
        ))}
      </ol>

      {sortedBarrios.length === 0 && (
        <div style={{ color: '#f6e05e', fontSize: 15, marginTop: 24 }}>
          No hay datos disponibles.
        </div>
      )}

      {sortedBarrios.length > 0 && (
        <button
          onClick={() => {
            console.log('Datos a enviar:', sortedBarrios);
            navigate('/visualization', { 
              state: { 
                data: sortedBarrios || [],
                totals: totals // Enviamos tambi√©n los totales a la visualizaci√≥n
              }
            });
          }}
          className="mt-6 bg-yellow-500 hover:bg-yellow-600 text-gray-900 px-4 py-3 rounded-lg font-medium transition-colors flex items-center justify-center gap-2"
        >
          <svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M2 2h16v16H2V2zm2 12h2v2H4v-2zm0-3h2v2H4v-2zm0-3h2v2H4V8zm0-3h2v2H4V5zm3 9h6v2H7v-2zm0-3h6v2H7v-2zm0-3h6v2H7V8zm0-3h6v2H7V5zm7 9h2v2h-2v-2zm0-3h2v2h-2v-2zm0-3h2v2h-2V8zm0-3h2v2h-2V5z" fill="currentColor"/>
          </svg>
          Ver Visualizaci√≥n de Datos
        </button>
      )}
    </div>
  );
};

export default RightSidebarTop10Barrios;
